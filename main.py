import speech_recognition as sr
import wikipedia
import win32com.client
import webbrowser
import subprocess
import os
import datetime


#--------------------for chatting with Jarvis using Chatgpt to answer---------------#
chatStr =""
def chat(query):
    import openai
    from config import apikey
    global chatStr
    openai.api_key = apikey
    chatStr = ""

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=query,
        temperature=1,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    try:
        chatStr += f"\nManish:{query}\n Jarvis:{response['choices'][0]['text']}"
        print(chatStr)
        say(response["choices"][0]['text'])

        #return response['choices'][0]['text']

    except Exception as e:
        print("some error occured")


#---------------------------Getting answers from chatGPT---------------------#
def ai(prompt):
    import openai
    from config import apikey
    text = ""
    openai.api_key = apikey

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=1,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    try:
        print(response["choices"][0]['text'])
        text += response["choices"][0]['text']
        if not os.path.exists("open_ai"):
            os.makedirs("open_ai")

        #with open(f"open_ai/prompt - {random.randint(1,3243637)}" , "w") as f:
        with open((f"open_ai/{''.join(prompt.split('intelligence')[1:])}.txt", "w") or (f"open_ai/{''.join(prompt.split('code')[1:])}.txt", "w")) as f:
            f.write(text)
    except Exception as e:
        print("some error occured")



#------------------------------------------say()-------------------------------------------#
def say(s):
    speaker = win32com.client.Dispatch("SAPI.SpVoice")
    speaker.Speak(s)

#-------------------take_command_from_user_through_microphone------------------------------#
def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        audio = r.listen(source)
        try:
            text = r.recognize_google(audio, language="en-in")
            print(f"user said: {text}")
            return text
        except Exception as e:
            return "Some error occured,sorry from jarvis"

if __name__ == '__main__':

    say("Hello sir")
    while True:
        print("listening.................")
        query = takeCommand()
        #say(query)

        #-------------------------------------TO_Open_Different_websites--------------------------------------#
        sites = [["Youtube", "https://www.youtube.com"], ["wikipedia", "https://www.wikipedia.com"],["instagram", "https://www.instagram .com"]]
        for site in sites:
            if f"Open {site[0]}".lower() in query.lower():
                say(f"Opening {site[0]} sir ")
                webbrowser.open(site[1])

        #------------------------------------TO_open_differnet_applications------------------------------------#
        apps = [["telegram", r"C:\Users\MANISH\AppData\Roaming\Telegram Desktop\Telegram"],["cmd", r"C:\WINDOWS\system32\cmd"]]
        for app in apps:
            if f"Open {app[0]}".lower() in query.lower():
                say(f"opening {app[0]} sir")
                subprocess.call(app[1])
        #------------------------------------shows the current time--------------------------------------------#
        if "the time" in query:
            strfTime = datetime.datetime.now().strftime("%H:%M:%S")
            say(f"Sir the time is {strfTime}")


        #---- save the output generated by the AI as a .text file in open_ai folder activates by saying "using Artificial intelligence---#
        elif ("using Artificial intelligence".lower()) in query.lower():
            print("Generating.....")
            ai(prompt=query)
        elif("write a code".lower()) in query.lower():
            ai(prompt=query)

        # ------stops the program by saying stop--------------#
        elif "stop" in query:
            exit()

        else:
            print("chatting........")
            chat(query)




